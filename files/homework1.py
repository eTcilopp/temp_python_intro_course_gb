'''
Задача 2: Найдите сумму цифр трехзначного числа.

*Пример:*

123 -> 6 (1 + 2 + 3)
100 -> 1 (1 + 0 + 0) |
'''



def get_sum_of_containing_numbers(num: int) -> int:
    sum = 0
    while num > 0:
        sum += num % 10
        num = int(num/10)
    return sum

num = int(input('Введите трехзначное число: '))
print(get_sum_of_containing_numbers(num))


'''

Задача 4: Петя, Катя и Сережа делают из бумаги журавликов. Вместе они сделали S журавликов. 
Сколько журавликов сделал каждый ребенок, если известно, 
что Петя и Сережа сделали одинаковое количество журавликов, а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?

*Пример:*

6 -> 1  4  1
24 -> 4  16  4
    60 -> 10  40  10
'''
s = 6
print(f'Катя: {s*2/3}') # Катя: 4.0
print(f'Петя: {s/6}') # Петя: 1.0
print(f'Сережа :{s/6}') # Сережа :1.0



'''
Задача 6: Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались за проезд и получали билет с номером. Счастливым билетом называют такой билет с шестизначным номером, где сумма первых трех цифр равна сумме последних трех. Т.е. билет с номером 385916 – счастливый, т.к. 3+8+5=9+1+6. Вам требуется написать программу, которая проверяет счастливость билета.

*Пример:*

385916 -> yes
123456 -> no
'''

num = int(input('Введите шестизначное число: '))
left = int(num/1000)
right = num - left * 1000
res = 'no'
if get_sum_of_containing_numbers(left) == get_sum_of_containing_numbers(right):
    res = 'yes'
print(res)

'''
Задача 8: Требуется определить, можно ли от шоколадки размером n x m долек отломить k долек, 
если разрешается сделать один разлом по прямой между дольками (то есть разломить шоколадку на два прямоугольника).

*Пример:*

3 2 4 -> yes
3 2 1 -> no
'''



def get_chocolate_slice(n: int, m: int, k: int) -> str: 
    for i in range(n, 0, -1):
        if i * m == k:
            return 'yes'
    for i in range(m, 0, -1):
        if i * n == k:
            return 'yes'
    return 'no'

n = 3
m = 2
k = 4
print(get_chocolate_slice(n, m, k)) #  'yes'
n = 3
m = 2
k = 1
print(get_chocolate_slice(n, m, k))  # 'no'


